<?xml version="1.0" encoding="UTF-8"?>
<project name="uml2cs-transformations-common">

	<!-- = = = = = taskdefs = = = = = -->
	
	<path id="anttasks.path">
		<fileset dir=".">
			<include name="**/*.jar"/>
		</fileset>
	</path>
	
	<taskdef name="javaformatter" 
		classname="org.hibernate.tool.ant.JavaFormatterTask"
		classpathref="anttasks.path"/>

	<!-- = = = = = properties = = = = = -->

	<property name="trans.uri" value="platform:/resource/uml2cs-transformations"/>

	<property name="trans.default.path" value="${trans.uri}/transformations/"/>
	<property name="trans.java.path" value="${trans.uri}/transformations-java/"/>
	<property name="trans.java2.path" value="${trans.uri}/transformations-java2/"/>

	<property name="metamodel.uml2.uri" value="http://www.eclipse.org/uml2/3.0.0/UML"/>
	<property name="metamodel.xml.uri" value="${trans.uri}/metamodels/XML.ecore"/>
	<property name="metamodel.java.nsuri" value="http://www.eclipse.org/gmt/modisco/JavaAST"/>
	<property name="metamodel.hbm.nsuri" value="http://hibernate.sourceforge.net/hibernate-mapping-3.0.xsd"/>
	<property name="profile.accessors.uri" value="${trans.uri}/profiles/Accessors.profile.uml"/>
	<property name="model.uml2types.uri" value="${trans.uri}/models/PrimitiveTypes.uml"/>
	<property name="model.javatypes.uri" value="${trans.uri}/models/JavaTypes.uml"/>
	<property name="model.obstypes.uri" value="${trans.uri}/models/Observer.uml"/>
	<property name="model.itenumadapter.uri" value="${trans.uri}/models/IteratorEnumerationAdapter.uml"/>
	<property name="model.midlet.uri" value="${trans.uri}/models/MIDlet.uml"/>
	<property name="model.swtapplication.uri" value="${trans.uri}/models/SWTApplication.uml"/>

	<property name="model.parameters.uri" value="${current.uri}/parameters.xmi"/>

	<!-- = = = = = macros = = = = = -->

	<!-- = = = = = = = = = = = = = = = = =
		  macrodef: profiles		  
		 = = = = = = = = = = = = = = = = = -->
	<macrodef name="profiles">
		<attribute name="in" default="MODEL.IN" />
		<attribute name="out" default="MODEL.OUT" />
		<attribute name="uri" default="MODEL.OUT.URI" />
		<sequential>
			<emftvm.run modulepath="${trans.path}" module="UML2Profiles">
				<metamodel name="UML2"/>
				<inputmodel name="@{in}" as="IN"/>
				<inputmodel name="Accessors" as="ACCESSORS"/>
				<outputmodel name="@{out}" as="OUT" uri="@{uri}"/>
			</emftvm.run>
			<antcall target="saveModel" inheritRefs="true">
				<param name="model" value="@{out}"/>
				<param name="uri" value="@{uri}"/>
			</antcall>
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
		  macrodef: accessors		  
		 = = = = = = = = = = = = = = = = = -->
	<macrodef name="accessors">
		<attribute name="in" default="MODEL.IN" />
		<attribute name="out" default="MODEL.OUT" />
		<attribute name="uri" default="MODEL.OUT.URI" />
		<sequential>
			<emftvm.run modulepath="${trans.path}" module="UML2Accessors">
				<metamodel name="UML2"/>
				<inputmodel name="Accessors" as="ACCESSORS"/>
				<inputmodel name="PrimitiveTypes" as="UML2TYPES"/>
				<inputmodel name="@{in}" as="IN"/>
				<outputmodel name="@{out}" as="OUT" uri="@{uri}"/>
			</emftvm.run>
			<antcall target="saveModel" inheritRefs="true">
				<param name="model" value="@{out}"/>
				<param name="uri" value="@{uri}"/>
			</antcall>
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
		  macrodef: observer		  
		 = = = = = = = = = = = = = = = = = -->
	<macrodef name="observer">
		<attribute name="in" default="MODEL.IN" />
		<attribute name="out" default="MODEL.OUT" />
		<attribute name="uri" default="MODEL.OUT.URI" />
		<sequential>
			<emftvm.run modulepath="${trans.path}" module="UML2Observer">
				<metamodel name="UML2"/>
				<inputmodel name="Observer" as="OBSERVER"/>
				<inputmodel name="PrimitiveTypes" as="UML2TYPES"/>
				<inputmodel name="@{in}" as="IN"/>
				<outputmodel name="@{out}" as="OUT" uri="@{uri}"/>
			</emftvm.run>
			<antcall target="saveModel" inheritRefs="true">
				<param name="model" value="@{out}"/>
				<param name="uri" value="@{uri}"/>
			</antcall>
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
		  macrodef: javaobserver		  
		 = = = = = = = = = = = = = = = = = -->
	<macrodef name="javaobserver">
		<attribute name="in" default="MODEL.IN" />
		<attribute name="out" default="MODEL.OUT" />
		<attribute name="uri" default="MODEL.OUT.URI" />
		<sequential>
			<emftvm.run modulepath="${trans.path}" module="UML2JavaObserver">
				<metamodel name="UML2"/>
				<inputmodel name="ImplTypes" as="IMPLTYPES"/>
				<inputmodel name="PrimitiveTypes" as="UML2TYPES"/>
				<inputmodel name="@{in}" as="IN"/>
				<outputmodel name="@{out}" as="OUT" uri="@{uri}"/>
			</emftvm.run>
			<antcall target="saveModel" inheritRefs="true">
				<param name="model" value="@{out}"/>
				<param name="uri" value="@{uri}"/>
			</antcall>
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
		  macrodef: abstractfactory		  
		 = = = = = = = = = = = = = = = = = -->
	<macrodef name="abstractfactory">
		<attribute name="in" default="MODEL.IN" />
		<attribute name="out" default="MODEL.OUT" />
		<attribute name="uri" default="MODEL.OUT.URI" />
		<sequential>
			<emftvm.run modulepath="${trans.path}" module="UML2AbstractFactory">
				<metamodel name="UML2"/>
				<inputmodel name="@{in}" as="IN"/>
				<outputmodel name="@{out}" as="OUT" uri="@{uri}"/>
			</emftvm.run>
			<antcall target="saveModel" inheritRefs="true">
				<param name="model" value="@{out}"/>
				<param name="uri" value="@{uri}"/>
			</antcall>
		</sequential>
	</macrodef>
	
	<!-- = = = = = = = = = = = = = = = = =
		  macrodef: singleton		  
		 = = = = = = = = = = = = = = = = = -->
	<macrodef name="singleton">
		<attribute name="in" default="MODEL.IN" />
		<attribute name="out" default="MODEL.OUT" />
		<attribute name="uri" default="MODEL.OUT.URI" />
		<sequential>
			<emftvm.run modulepath="${trans.path}" module="UML2Singleton">
				<metamodel name="UML2"/>
				<inputmodel name="@{in}" as="IN"/>
				<outputmodel name="@{out}" as="OUT" uri="@{uri}"/>
			</emftvm.run>
			<antcall target="saveModel" inheritRefs="true">
				<param name="model" value="@{out}"/>
				<param name="uri" value="@{uri}"/>
			</antcall>
		</sequential>
	</macrodef>
	
	<!-- = = = = = = = = = = = = = = = = =
		  macrodef: applet		  
		 = = = = = = = = = = = = = = = = = -->
	<macrodef name="applet">
		<attribute name="in" default="MODEL.IN" />
		<attribute name="out" default="MODEL.OUT" />
		<attribute name="uri" default="MODEL.OUT.URI" />
		<sequential>
			<emftvm.run modulepath="${trans.path}" module="UML2Applet">
				<metamodel name="UML2"/>
				<inputmodel name="@{in}" as="IN"/>
				<inputmodel name="ImplTypes" as="IMPLTYPES"/>
				<outputmodel name="@{out}" as="OUT" uri="@{uri}"/>
			</emftvm.run>
			<antcall target="saveModel" inheritRefs="true">
				<param name="model" value="@{out}"/>
				<param name="uri" value="@{uri}"/>
			</antcall>
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
		  macrodef: midlet		  
		 = = = = = = = = = = = = = = = = = -->
	<macrodef name="midlet">
		<attribute name="in" default="MODEL.IN" />
		<attribute name="out" default="MODEL.OUT" />
		<attribute name="uri" default="MODEL.OUT.URI" />
		<sequential>
			<emftvm.run modulepath="${trans.path}" module="UML2MIDlet">
				<metamodel name="UML2"/>
				<inputmodel name="@{in}" as="IN"/>
				<inputmodel name="MIDlet" as="MIDLET"/>
				<outputmodel name="@{out}" as="OUT" uri="@{uri}"/>
			</emftvm.run>
			<antcall target="saveModel" inheritRefs="true">
				<param name="model" value="@{out}"/>
				<param name="uri" value="@{uri}"/>
			</antcall>
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
		  macrodef: swtapplication		  
		 = = = = = = = = = = = = = = = = = -->
	<macrodef name="swtapplication">
		<attribute name="in" default="MODEL.IN" />
		<attribute name="out" default="MODEL.OUT" />
		<attribute name="uri" default="MODEL.OUT.URI" />
		<sequential>
			<emftvm.run modulepath="${trans.path}" module="UML2SWTApplication">
				<metamodel name="UML2"/>
				<inputmodel name="@{in}" as="IN"/>
				<inputmodel name="SWTApplication" as="SWTAPP"/>
				<inputmodel name="ImplTypes" as="IMPLTYPES"/>
				<outputmodel name="@{out}" as="OUT" uri="@{uri}"/>
			</emftvm.run>
			<antcall target="saveModel" inheritRefs="true">
				<param name="model" value="@{out}"/>
				<param name="uri" value="@{uri}"/>
			</antcall>
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
		  macrodef: asyncmethods		  
		 = = = = = = = = = = = = = = = = = -->
	<macrodef name="asyncmethods">
		<attribute name="in" default="MODEL.IN" />
		<attribute name="out" default="MODEL.OUT" />
		<attribute name="uri" default="MODEL.OUT.URI" />
		<sequential>
			<emftvm.run modulepath="${trans.path}" module="UML2AsyncMethods">
				<metamodel name="UML2"/>
				<inputmodel name="@{in}" as="IN"/>
				<outputmodel name="@{out}" as="OUT" uri="@{uri}"/>
			</emftvm.run>
			<antcall target="saveModel" inheritRefs="true">
				<param name="model" value="@{out}"/>
				<param name="uri" value="@{uri}"/>
			</antcall>
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
		  macrodef: datatypes		  
		 = = = = = = = = = = = = = = = = = -->
	<macrodef name="datatypes">
		<attribute name="in" default="MODEL.IN" />
		<attribute name="out" default="MODEL.OUT" />
		<attribute name="uri" default="MODEL.OUT.URI" />
		<sequential>
			<emftvm.run modulepath="${trans.path}" module="UML2DataTypes">
				<metamodel name="UML2"/>
				<inputmodel name="ImplTypes" as="IMPLTYPES"/>
				<inputmodel name="@{in}" as="IN"/>
				<outputmodel name="@{out}" as="OUT" uri="@{uri}"/>
			</emftvm.run>
			<antcall target="saveModel" inheritRefs="true">
				<param name="model" value="@{out}"/>
				<param name="uri" value="@{uri}"/>
			</antcall>
			<antcall target="saveLastModel" inheritRefs="true">
				<param name="model" value="@{out}"/>
				<param name="uri" value="@{uri}"/>
			</antcall>
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
		  macrodef: generate		  
		 = = = = = = = = = = = = = = = = = -->
	<macrodef name="generate">
		<attribute name="in" default="MODEL.IN" />
		<sequential>
			<emftvm.run modulepath="${trans.path}" module="${trans.generate}">
				<metamodel name="UML2"/>
				<inputmodel name="@{in}" as="IN"/>
				<metamodel name="XML"/>
				<inputmodel name="Parameters" as="parameters"/>
			</emftvm.run>
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
		  macrodef: generateHBM
		 = = = = = = = = = = = = = = = = = -->
	<macrodef name = 'generateHBM'>
		<attribute name = 'in' default = 'MODEL.IN'/>
		<attribute name = 'out' default = 'MODEL.OUT'/>
		<attribute name = 'uri' default = 'MODEL.OUT.URI'/>
		<sequential>
			<emftvm.run modulepath="${trans.path}" module="GenerateHibernateMapping">
				<metamodel name="HBM"/>
				<metamodel name="UML2"/>
				<inputmodel name="@{in}" as ="IN"/>
				<outputmodel name="@{out}" as="OUT" uri="@{uri}"/>
			</emftvm.run>
			<emftvm.saveModel name="@{out}" uri="@{uri}" derived="true"/>
		</sequential>
	</macrodef>

	<!-- = = = = = = = = = = = = = = = = =
		  macrodef: java2uml		  
		 = = = = = = = = = = = = = = = = = -->
	<macrodef name="java2uml">
		<attribute name="in" default="MODEL.IN" />
		<attribute name="code" default="MODEL.CODE" />
		<attribute name="out" default="MODEL.OUT" />
		<attribute name="uri" default="MODEL.OUT.URI" />
		<sequential>
			<emftvm.run modulepath="${trans.path}" module="Java2UML">
				<metamodel name="UML2"/>
				<metamodel name="JAVA"/>
				<inputmodel name="@{in}" as="IN"/>
				<inputmodel name="@{code}" as="CODE"/>
				<outputmodel name="@{out}" as="OUT" uri="@{uri}"/>
			</emftvm.run>
		</sequential>
	</macrodef>

	<!-- = = = = = targets = =  = = = -->

	<!-- = = = = = = = = = = = = = = = = =
		  target: defineProperties, defineJava1Properties, defineJava2Properties
		 = = = = = = = = = = = = = = = = = -->
	<target name = "defineProperties" depends = "defineJava1Properties, defineJava2Properties"/>

	<target name = "defineJava1Properties" if = "java1">
		<echo>Java1 selected</echo>
		<property name="trans.path" value="${trans.java.path},${trans.default.path}"/>
		<property name="model.impltypes.uri" value="${model.javatypes.uri}"/>
		<property name="trans.generate" value="UML2ToJava"/>
	</target>

	<target name = "defineJava2Properties" if = "java2">
		<echo>Java2 selected</echo>
		<property name="trans.path" value="${trans.java2.path},${trans.java.path},${trans.default.path}"/>
		<property name="model.impltypes.uri" value="${model.javatypes.uri}"/>
		<property name="trans.generate" value="UML2ToJava"/>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: profiles
		 = = = = = = = = = = = = = = = = = -->
	<target name="profiles">
		<!-- params: ${in}, ${prefix} -->
		<profiles in = "${in}" out = "${prefix}-profiles" uri = "${current.uri}/${prefix}-profiles.uml"/>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: accessors
		 = = = = = = = = = = = = = = = = = -->
	<target name="accessors" depends="profiles">
		<!-- params: ${in}, ${prefix} -->
		<accessors in = "${prefix}-profiles" out = "${prefix}-accessors" uri = "${current.uri}/${prefix}-accessors.uml"/>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: observer, javaobserver
		 = = = = = = = = = = = = = = = = = -->
	<target name="observer" if="observer" depends="accessors">
		<!-- params: ${in}, ${prefix} -->
		<observer in = "${prefix}-accessors" out = "${prefix}-observer" uri = "${current.uri}/${prefix}-observer.uml"/>
	</target>

	<target name="javaobserver" if="javaobserver" depends="accessors">
		<!-- params: ${in}, ${prefix} -->
		<javaobserver in = "${prefix}-accessors" out = "${prefix}-observer" uri = "${current.uri}/${prefix}-observer.uml"/>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: abstractfactory
		 = = = = = = = = = = = = = = = = = -->
	<target name="abstractfactory" depends="observer, javaobserver">
		<!-- params: ${in}, ${prefix} -->
		<abstractfactory in = "${prefix}-observer" out = "${prefix}-abstractfactory" uri = "${current.uri}/${prefix}-abstractfactory.uml"/>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: singleton
		 = = = = = = = = = = = = = = = = = -->
	<target name="singleton" depends="abstractfactory">
		<!-- params: ${in}, ${prefix} -->
		<singleton in = "${prefix}-abstractfactory" out = "${prefix}-singleton" uri = "${current.uri}/${prefix}-singleton.uml"/>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: applet, midlet, swt-application
		 = = = = = = = = = = = = = = = = = -->
	<target name="applet" if="applet" depends="singleton">
		<!-- params: ${in}, ${prefix} -->
		<applet in = "${prefix}-singleton" out = "${prefix}-applet" uri = "${current.uri}/${prefix}-applet.uml"/>
	</target>

	<target name="midlet" if="midlet" depends="singleton">
		<!-- params: ${in}, ${prefix} -->
		<midlet in = "${prefix}-singleton" out = "${prefix}-applet" uri = "${current.uri}/${prefix}-applet.uml"/>
	</target>

	<target name="swtapplication" if="swt-application" depends="singleton">
		<!-- params: ${in}, ${prefix} -->
		<swtapplication in = "${prefix}-singleton" out = "${prefix}-applet" uri = "${current.uri}/${prefix}-applet.uml"/>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: asyncmethods
		 = = = = = = = = = = = = = = = = = -->
	<target name="asyncmethods" depends="applet, midlet, swtapplication">
		<!-- params: ${in}, ${prefix} -->
		<asyncmethods in = "${prefix}-applet" out = "${prefix}-asyncmethods" uri = "${current.uri}/${prefix}-asyncmethods.uml"/>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: datatypes
		 = = = = = = = = = = = = = = = = = -->
	<target name="datatypes" depends="asyncmethods">
		<!-- params: ${in}, ${prefix} -->
		<datatypes in = "${prefix}-asyncmethods" out = "${prefix}-datatypes" uri = "${current.uri}/${prefix}-datatypes.uml"/>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: generate
		 = = = = = = = = = = = = = = = = = -->
	<target name="generate" depends="datatypes">
		<!-- params: ${in}, ${prefix} -->
		<generate in = "${prefix}-datatypes"/>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: generateWithHBM
		 = = = = = = = = = = = = = = = = = -->
	<target name="generateWithHBM" depends="generate, loadHBM">
		<!-- params: ${in}, ${prefix}, ${outHBM}, ${uriHBM} -->
		<generateHBM in = "${in}" out = "${outHBM}" uri = "${uriHBM}"/>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: java2uml
		 = = = = = = = = = = = = = = = = = -->
	<target name="java2uml">
		<!-- params: ${in}, ${code}, ${uri} -->
		<java2uml in = "${in}" out = "feedback-${in}" code = "${code}" uri = "${uri}"/>
		<emftvm.saveModel name="feedback-${in}" uri="${uri}" derived="false"/>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: loadBaseModels
		 = = = = = = = = = = = = = = = = = -->
	<target name = "loadBaseModels">
		<emftvm.loadMetamodel name="XML" uri="${metamodel.xml.uri}"/>
		<emftvm.loadModel name="Parameters" uri="${current.uri}/parameters.xmi">
			<!--injector name = "xml"/-->
		</emftvm.loadModel>
		<emftvm.loadMetamodel name="UML2" uri="${metamodel.uml2.uri}"/>
		<emftvm.loadModel name="Accessors" uri="${profile.accessors.uri}"/>
		<emftvm.loadModel name="PrimitiveTypes" uri="${model.uml2types.uri}"/>
		<emftvm.loadModel name="ImplTypes" uri="${model.impltypes.uri}"/>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: loadIteratorEnumerationAdapter
		 = = = = = = = = = = = = = = = = = -->
	<target name = "loadIteratorEnumerationAdapter" if = "java2" depends = "loadBaseModels">
		<emftvm.loadModel name="IteratorEnumerationAdapter" uri="${model.itenumadapter.uri}"/>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: loadObserver
		 = = = = = = = = = = = = = = = = = -->
	<target name = "loadObserver" if = "observer" depends = "loadBaseModels">
		<emftvm.loadModel name="Observer" uri="${model.obstypes.uri}"/>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: loadMIDlet
		 = = = = = = = = = = = = = = = = = -->
	<target name = "loadMIDlet" if = "midlet" depends = "loadBaseModels">
		<emftvm.loadModel name="MIDlet" uri="${model.midlet.uri}"/>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: loadSWTApplication
		 = = = = = = = = = = = = = = = = = -->
	<target name = "loadSWTApplication" if = "swt-application" depends = "loadBaseModels">
		<emftvm.loadModel name="SWTApplication" uri="${model.swtapplication.uri}"/>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: loadJAVA
		 = = = = = = = = = = = = = = = = = -->
	<target name = "loadJAVA">
		<emftvm.loadMetamodel name="JAVA" uri="${metamodel.java.nsuri}"/>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: loadHBM
		 = = = = = = = = = = = = = = = = = -->
	<target name = "loadHBM">
		<emftvm.loadMetamodel name="HBM" uri="${metamodel.hbm.nsuri}"/>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: saveModel
		 = = = = = = = = = = = = = = = = = -->
	<target name = "saveModel" if = "saveModels">
	<!-- params: ${model}, ${uri} -->
   		<emftvm.saveModel name="${model}" uri="${uri}" derived="true"/>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: saveLastModel
		 = = = = = = = = = = = = = = = = = -->
	<target name = "saveLastModel" if = "saveLastModel">
	<!-- params: ${model}, ${uri} -->
   		<emftvm.saveModel name="${model}" uri="${uri}" derived="true"/>
	</target>
	
	<!-- = = = = = = = = = = = = = = = = =
		  target: IteratorEnumerationAdapter
		 = = = = = = = = = = = = = = = = = -->
	<target name = "IteratorEnumerationAdapter" if = "java2" depends = "loadBaseModels, loadIteratorEnumerationAdapter, loadObserver, loadMIDlet">
		<antcall target = 'generate' inheritRefs = 'true'>
			<param name = 'in' value = 'IteratorEnumerationAdapter'/>
			<param name = 'prefix' value = 'enum'/>
		</antcall>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: Observer
		 = = = = = = = = = = = = = = = = = -->
	<target name = "Observer" if = "observer" depends = "loadBaseModels, loadIteratorEnumerationAdapter, loadObserver, loadMIDlet">
		<antcall target = 'generate' inheritRefs = 'true'>
			<param name = 'in' value = 'Observer'/>
			<param name = 'prefix' value = 'observer'/>
		</antcall>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: MIDlet
		 = = = = = = = = = = = = = = = = = -->
	<target name = "MIDlet" if = "midlet" depends = "loadBaseModels, loadIteratorEnumerationAdapter, loadObserver, loadMIDlet">
		<antcall target = 'generate' inheritRefs = 'true'>
			<param name = 'in' value = 'MIDlet'/>
			<param name = 'prefix' value = 'midlet'/>
		</antcall>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: SWTApplication
		 = = = = = = = = = = = = = = = = = -->
	<target name = "SWTApplication" if = "swt-application" depends = "loadBaseModels, loadIteratorEnumerationAdapter, loadObserver, loadSWTApplication">
		<antcall target = 'generate' inheritRefs = 'true'>
			<param name = 'in' value = 'SWTApplication'/>
			<param name = 'prefix' value = 'swtapp'/>
		</antcall>
	</target>

	<!-- = = = = = = = = = = = = = = = = =
		  target: allBase
		 = = = = = = = = = = = = = = = = = -->
	<target name = "allBase" depends = "defineProperties, loadBaseModels, loadIteratorEnumerationAdapter, loadObserver, loadMIDlet, loadSWTApplication, IteratorEnumerationAdapter, Observer, MIDlet, SWTApplication"/>

	<!-- = = = = = = = = = = = = = = = = =
		  target: clean
		 = = = = = = = = = = = = = = = = = -->
	<target name = "clean">
        <delete includeemptydirs="true">
            <fileset dir = ".">
            	<include name = "*.uml"/>
        	</fileset>
        	<fileset dir="../src">
        		<include name="**/*"/>
        	</fileset>
        </delete>
	    <eclipse.refreshLocal resource = '${ant.project.name}/..'/>
	</target>
	
	<!-- = = = = = = = = = = = = = = = = =
		  target: prettyPrint
		 = = = = = = = = = = = = = = = = = -->
	<target name="prettyPrint">
		<javaformatter>
			<fileset dir="../src">
				<include name="**/*.java"/>
			</fileset>
		</javaformatter>
		<eclipse.refreshLocal resource="${ant.project.name}/.."/>
	</target>

</project>
