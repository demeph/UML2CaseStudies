-- @atlcompiler atl2006
-- $Id: ConfigToBuildFile.atl 7251 2007-09-11 11:57:29Z dwagelaa $
-- Generates a build.xml file from a Transformations.ecore config file
module ConfigToBuildFile; --extends ConfigToBuildFile from uml2cs-transformations

create OUT : XML from IN : CFG;

-- ======================================================================
-- helper attributes begin
-- ======================================================================

helper def : ModelPath : String = '/uml2cs-instantmessenger-model/models';

-- ======================================================================
-- helper attributes end
-- ======================================================================

-- ======================================================================
-- helper methods begin
-- ======================================================================

helper context CFG!"instantmessenger::InstantMessengerConfiguration"
def : localNetworkDepends() : Sequence(String) =
	if self.localNetwork.oclIsUndefined() then
		Sequence{}
	else
		Sequence{'LocalNetwork'}
	endif;
	
helper context CFG!"instantmessenger::InstantMessengerConfiguration"
def : jabberNetworkDepends() : Sequence(String) =
	if self.jabberNetwork.oclIsUndefined() then
		Sequence{}
	else
		if self.jabberNetwork.jabberTransport.oclIsKindOf(
			CFG!"instantmessenger::MEJabberTransport") then
			Sequence{'JabberNetwork', 'MEJabberTransport'}
		else
			Sequence{'JabberNetwork', 'DefaultJabberTransport'}
		endif
	endif;
	
helper context CFG!"instantmessenger::InstantMessengerConfiguration"
def : userInterfaceDepends() : Sequence(String) =
	if self.userInterface->select(u|u.oclIsKindOf(
		CFG!"instantmessenger::AWTUserInterface"))->notEmpty() then
		Sequence{'AWTUserInterface'}
	else
		Sequence{}
	endif
	->union(
	if self.userInterface->select(u|u.oclIsKindOf(
		CFG!"instantmessenger::SwingUserInterface"))->notEmpty() then
		Sequence{'SwingUserInterface'}
	else
		Sequence{}
	endif)
	->union(
	if self.userInterface->select(u|u.oclIsKindOf(
		CFG!"instantmessenger::LCDUIUserInterface"))->notEmpty() then
		Sequence{'LCDUIUserInterface'}
	else
		Sequence{}
	endif);
	
-- ======================================================================
-- helper methods end
-- ======================================================================

-- ======================================================================
-- transformation rules begin
-- ======================================================================

rule ConfigRoot {
	from s : CFG!"instantmessenger::InstantMessengerConfiguration"
	-- <project name="s.targetProject/build" default="all">
	to root : XML!"XML::Root" mapsTo s (
		name <- thisModule.ConfigHeader(s)),
	   default : XML!"XML::Attribute" (
	   	parent <- root,
	   	name <- 'default',
		value <- 'all'),
	-- <target name = 'all' depends = '...'>
	   allTarget : XML!"XML::Element" (
	   	name <- 'target',
		children <- thisModule.AllTarget(s),
		parent <- root),
	-- <target name = 'InstantMessengerModel' depends = 'allBase'>
	   imTarget : XML!"XML::Element" (
	   	name <- 'target',
		children <- thisModule.ModelTarget(
			'InstantMessengerModel',
			'inModel',
			'im',
			thisModule.ModelPath + '/InstantMessengerModel.uml'),
		parent <- root)
}

rule LocalNetwork {
	from s : CFG!"instantmessenger::LocalNetwork"
	-- <target name = 'LocalNetwork' depends = 'allBase'>
	to target : XML!"XML::Element" mapsTo s (
		name <- 'target',
		children <- thisModule.ModelTarget(
			'LocalNetwork',
			'Local',
			'local',
			thisModule.ModelPath + '/InstantMessengerLocal.uml'),
		parent <- s.config)
}

rule JabberNetwork {
	from s : CFG!"instantmessenger::JabberNetwork"
	-- <target name = 'JabberNetwork' depends = 'allBase'>
	to target : XML!"XML::Element" mapsTo s (
		name <- 'target',
		children <- thisModule.ModelTarget(
			'JabberNetwork',
			'Jabber',
			'jabber',
			thisModule.ModelPath + '/InstantMessengerJabber.uml'),
		parent <- s.config)
}

rule DefaultJabberTransport {
	from s : CFG!"instantmessenger::DefaultJabberTransport"
	-- <target name = 'DefaultJabberTransport' depends = 'allBase'>
	to target : XML!"XML::Element" mapsTo s (
		name <- 'target',
		children <- thisModule.ModelTarget(
			'DefaultJabberTransport',
			'DefaultJabber',
			'defaultjabber',
			thisModule.ModelPath + '/InstantMessengerDefaultJabber.uml'),
		parent <- s.jabberNetwork.config)
}

rule MEJabberTransport {
	from s : CFG!"instantmessenger::MEJabberTransport"
	-- <target name = 'MEJabberTransport' depends = 'allBase'>
	to target : XML!"XML::Element" mapsTo s (
		name <- 'target',
		children <- thisModule.ModelTarget(
			'MEJabberTransport',
			'MEJabber',
			'mejabber',
			thisModule.ModelPath + '/InstantMessengerMEJabber.uml'),
		parent <- s.jabberNetwork.config)
}

rule AWTUserInterface {
	from s : CFG!"instantmessenger::AWTUserInterface"
	-- <target name = 'AWTUserInterface' depends = 'allBase'>
	to target : XML!"XML::Element" mapsTo s (
		name <- 'target',
		children <- thisModule.ModelTarget(
			'AWTUserInterface',
			'AWT',
			'awt',
			thisModule.ModelPath + '/InstantMessengerAWT.uml'),
		parent <- s.config)
}

rule SwingUserInterface {
	from s : CFG!"instantmessenger::SwingUserInterface"
	-- <target name = 'SwingUserInterface' depends = 'allBase'>
	to target : XML!"XML::Element" mapsTo s (
		name <- 'target',
		children <- thisModule.ModelTarget(
			'SwingUserInterface',
			'Swing',
			'swing',
			thisModule.ModelPath + '/InstantMessengerSwing.uml'),
		parent <- s.config)
}

rule LCDUIUserInterface {
	from s : CFG!"instantmessenger::LCDUIUserInterface"
	-- <target name = 'LCDUIUserInterface' depends = 'allBase'>
	to target : XML!"XML::Element" mapsTo s (
		name <- 'target',
		children <- thisModule.ModelTarget(
			'LCDUIUserInterface',
			'LCDUI',
			'lcdui',
			thisModule.ModelPath + '/InstantMessengerLCDUI.uml'),
		parent <- s.config)
}

rule AllTarget(c : CFG!"instantmessenger::InstantMessengerConfiguration") {
	-- Sequence{name="all" depends="..."}
	to targetName : XML!"XML::Attribute"(
	   	name <- 'name',
		value <- 'all'),
	   targetDepends : XML!"XML::Attribute"(
	   	name <- 'depends',
		value <- Sequence{'InstantMessengerModel'}
	   		->union(c.localNetworkDepends())
			->union(c.jabberNetworkDepends())
			->union(c.userInterfaceDepends())
			->append('prettyPrint')
			->iterate(e; acc : String = '' | acc +
				if acc = '' then e
				else ', ' + e endif).debug('All')),
	-- 	<eclipse.refreshLocal resource="${ant.project.name}"/>
	   refresh : XML!"XML::Element" (
	   	name <- 'eclipse.refreshLocal'),
	   refreshResource : XML!"XML::Attribute" (
	   	name <- 'resource',
		value <- '${ant.project.name}',
		parent <- refresh)
	do {
		Sequence{targetName, targetDepends, refresh};
	}
}

rule ModelTarget(name : String, inModel : String, prefix : String, path : String) {
	-- Sequence{name = 'name' depends = 'allBase'}
	to targetName : XML!"XML::Attribute"(
	   	name <- 'name',
		value <- name),
	   targetDepends : XML!"XML::Attribute"(
	   	name <- 'depends',
		value <- 'allBase'),
	-- <am3.loadModel modelHandler = 'EMF' name = 'inModel' metamodel = 'UML2' path = 'path'/>
	   loadModel : XML!"XML::Element" (
	   	name <- 'am3.loadModel'),
	   modelHandler : XML!"XML::Attribute" (
	   	name <- 'modelHandler',
		value <- 'EMF',
		parent <- loadModel),
	   modelName : XML!"XML::Attribute" (
	   	name <- 'name',
		value <- inModel,
		parent <- loadModel),
	   metamodel : XML!"XML::Attribute" (
	   	name <- 'metamodel',
		value <- 'UML2',
		parent <- loadModel),
	   modelPath : XML!"XML::Attribute" (
	   	name <- 'path',
		value <- path,
		parent <- loadModel),
	-- <antcall target="generate" inheritRefs="true">
	   antcall : XML!"XML::Element" (
	   	name <- 'antcall'),
	   antcalltarget : XML!"XML::Attribute" (
	   	name <- 'target',
		value <- 'generate',
		parent <- antcall),
	   inheritRefs : XML!"XML::Attribute" (
	   	name <- 'inheritRefs',
		value <- 'true',
		parent <- antcall),
	-- <param name="in" value="inModel"/>
	   paramin : XML!"XML::Element" (
	   	name <- 'param',
		children <- thisModule.Property('in', inModel),
		parent <- antcall),
	-- <param name="prefix" value="prefix"/>
	   paramprefix : XML!"XML::Element" (
	   	name <- 'param',
		children <- thisModule.Property('prefix', prefix),
		parent <- antcall)
	do {
		Sequence{targetName, targetDepends, loadModel, antcall};
	}
}

-- ======================================================================
-- transformation rules end
-- ======================================================================
