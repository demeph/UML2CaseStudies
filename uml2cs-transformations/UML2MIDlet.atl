-- $Id$
-- Implements the Applet profile using a Java MIDP MIDlet
module UML2MIDlet; --extends UML2Copy

create OUT : UML2 from IN : UML2, MIDLET : UML2;

uses UML2;
uses Mappings;

-- ======================================================================
-- model-specific helpers begin
-- ======================================================================

helper def : language : String = 'language'->value();
helper def : AppletMIDlet : UML2!uml::Class = 'midlet::AppletMIDlet'->class();
helper def : applets : Sequence(UML2!Applet::Applet) = UML2!Applet::Applet->allInstances();
helper def : singletons : Sequence(UML2!Singleton::Singleton) = UML2!Singleton::Singleton->allInstances();

helper context UML2!uml::Classifier def : isApplet() : Boolean =
	thisModule.applets->select(o|o.base_Classifier=self)->notEmpty();

helper context UML2!uml::Classifier def : isSingleton() : Boolean =
	thisModule.singletons->select(o|o.base_Classifier=self)->notEmpty();

-- ======================================================================
-- model-specific helpers end
-- ======================================================================

-- ======================================================================
-- transformation rules begin
-- ======================================================================

rule Class {
    from s : UML2!uml::Class (
		if thisModule.inElements->includes(s) then
			s->oclIsTypeOf(UML2!uml::Class) and
			not s->isApplet()
		else false endif)
    to t : UML2!uml::Class mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isLeaf <- s.isLeaf,
        isAbstract <- s.isAbstract,
        isActive <- s.isActive,
        eAnnotations <- s.eAnnotations,
        ownedComment <- s.ownedComment,
        clientDependency <- s.clientDependency,
        nameExpression <- s.nameExpression,
        elementImport <- s.elementImport,
        packageImport <- s.packageImport,
        ownedRule <- s.ownedRule,
        templateParameter <- s.templateParameter,
        templateBinding <- s.templateBinding,
        ownedTemplateSignature <- s.ownedTemplateSignature,
        generalization <- s.generalization,
        powertypeExtent <- s.powertypeExtent,
        redefinedClassifier <- s.redefinedClassifier,
        substitution <- s.substitution,
        representation <- s.representation,
        collaborationUse <- s.collaborationUse,
        ownedUseCase <- s.ownedUseCase,
        useCase <- s.useCase,
        ownedAttribute <- s.ownedAttribute,
        ownedConnector <- s.ownedConnector,
        ownedBehavior <- s.ownedBehavior,
        classifierBehavior <- s.classifierBehavior,
        interfaceRealization <- s.interfaceRealization,
        ownedTrigger <- s.ownedTrigger,
        nestedClassifier <- s.nestedClassifier,
        ownedOperation <- s.ownedOperation,
        ownedReception <- s.ownedReception)
}
	
rule AppletClass {
    from s : UML2!uml::Class (
		if thisModule.inElements->includes(s) then
			s->oclIsTypeOf(UML2!uml::Class) and
			s->isApplet()
		else false endif)
	using { hasInit : Boolean = s.ownedOperation->select(o|o.name='init')->notEmpty(); }
    to t : UML2!uml::Class mapsTo s (
        name <- s.name->debug('AppletClass'),
        visibility <- s.visibility,
        isLeaf <- s.isLeaf,
        isAbstract <- s.isAbstract,
        isActive <- s.isActive,
        eAnnotations <- s.eAnnotations,
        ownedComment <- s.ownedComment,
        clientDependency <- s.clientDependency,
        nameExpression <- s.nameExpression,
        elementImport <- s.elementImport,
        packageImport <- s.packageImport,
        ownedRule <- s.ownedRule,
        templateParameter <- s.templateParameter,
        templateBinding <- s.templateBinding,
        ownedTemplateSignature <- s.ownedTemplateSignature,
        generalization <- s.generalization,
        powertypeExtent <- s.powertypeExtent,
        redefinedClassifier <- s.redefinedClassifier,
        substitution <- s.substitution,
        representation <- s.representation,
        collaborationUse <- s.collaborationUse,
        ownedUseCase <- s.ownedUseCase,
        useCase <- s.useCase,
        ownedAttribute <- s.ownedAttribute,
        ownedConnector <- s.ownedConnector,
        ownedBehavior <- s.ownedBehavior
			->union(
        		if hasInit then Set{}
        		else Set{thisModule->AppletInitOperation(s)} endif),
		classifierBehavior <- s.classifierBehavior,
        interfaceRealization <- s.interfaceRealization,
        ownedTrigger <- s.ownedTrigger,
        nestedClassifier <- s.nestedClassifier,
        ownedOperation <- s.ownedOperation,
        ownedReception <- s.ownedReception),
	-- MIDlet functionality --
	   g : UML2!uml::Generalization (
	   	general <- thisModule.AppletMIDlet,
		specific <- s)
}

rule AppletInitOperation(s : UML2!uml::Class) {
	to initOp : UML2!uml::Operation (
	   	name <- 'init',
		class <- s->debug('AppletInitOperation'),
		visibility <- #public,
		concurrency <- #sequential),
	   initBehavior : UML2!uml::OpaqueBehavior (
	   	specification <- initOp,
		name <- initOp.name + 'Behavior',
		language <- Sequence{thisModule.language},
		body <- Sequence{s->isSingleton()->midletInitBody()})
	do {
		initBehavior;
	}
}

rule OpaqueBehavior {
    from s : UML2!uml::OpaqueBehavior (
		if thisModule.inElements->includes(s) then
			s->oclIsTypeOf(UML2!uml::OpaqueBehavior)
		else false endif)
	using { isAppletInit : Boolean = 
		if (s.specification.name = 'init') then
			s.specification.class->isApplet()
		else false endif; }
    to t : UML2!uml::OpaqueBehavior mapsTo s (
        name <- s.name,
        visibility <- s.visibility,
        isLeaf <- s.isLeaf,
        isAbstract <- s.isAbstract,
        isActive <- s.isActive,
        isReentrant <- s.isReentrant,
        body <-
			if isAppletInit then
				s.body->collect(b|s.specification.class
					->isSingleton()->midletInitBody() + '\n' + b)
			else
				s.body
			endif,
        language <- s.language,
        eAnnotations <- s.eAnnotations,
        ownedComment <- s.ownedComment,
        clientDependency <- s.clientDependency,
        nameExpression <- s.nameExpression,
        elementImport <- s.elementImport,
        packageImport <- s.packageImport,
        ownedRule <- s.ownedRule,
        templateParameter <- s.templateParameter,
        templateBinding <- s.templateBinding,
        ownedTemplateSignature <- s.ownedTemplateSignature,
        generalization <- s.generalization,
        powertypeExtent <- s.powertypeExtent,
        redefinedClassifier <- s.redefinedClassifier,
        substitution <- s.substitution,
        representation <- s.representation,
        collaborationUse <- s.collaborationUse,
        ownedUseCase <- s.ownedUseCase,
        useCase <- s.useCase,
        ownedAttribute <- s.ownedAttribute,
        ownedConnector <- s.ownedConnector,
        ownedBehavior <- s.ownedBehavior,
        classifierBehavior <- s.classifierBehavior,
        interfaceRealization <- s.interfaceRealization,
        ownedTrigger <- s.ownedTrigger,
        nestedClassifier <- s.nestedClassifier,
        ownedOperation <- s.ownedOperation,
        ownedReception <- s.ownedReception,
        redefinedBehavior <- s.redefinedBehavior,
        ownedParameter <- s.ownedParameter,
        precondition <- s.precondition,
        postcondition <- s.postcondition,
        ownedParameterSet <- s.ownedParameterSet,
        specification <- s.specification)
}

-- ======================================================================
-- transformation rules end
-- ======================================================================
