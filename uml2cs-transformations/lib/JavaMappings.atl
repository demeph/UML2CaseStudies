-- $Id$
-- Java all versions code generation helpers
library JavaMappings;

uses Java; -- Java1 or Java2

------------------------------- General -----------------------------------

helper context String def : value() : String =
	if self = 'language' then 'java'
	else if self = 'separator' then '.'
	else '' endif endif;

------------------------------- Accessors -----------------------------------

helper context String def : setterBody() : String =
	'this.' + self + ' = ' + self + ';';

helper context String def : dualSetterBody(otherEnd : String) : String =
	'if (this.' + self + ' != ' + self + ') {\n' +
	'    this.' + self + ' = ' + self + ';\n' +
	'    ' + self + '.set' + otherEnd + '(this);\n' +
	'}';

helper context String def : addRemoveSetterBody(otherEnd : String) : String =
	if otherEnd <> '' then
		'if (this.' + self + ' != ' + self + ') {\n' +
        '    if (this.' + self + ' != null) this.' + self + '.remove' + otherEnd + '(this);\n' +
		'    this.' + self + ' = ' + self + ';\n' +
        '    if (' + self + ' != null) ' + self + '.add' + otherEnd + '(this);\n' +
		'}'
	else
		'this.' + self + ' = ' + self + ';'
	endif;

helper context String def : getterBody() : String =
	'return ' + self + ';';

helper context String def : multiGetterBody() : String =
	self->javaMultiGetterBody();
	
helper context String def : getAtBody(type : String) : String =
	self->javaGetAt(type);

helper context String def : indexOfBody() : String =
	'return this.' + self + '.indexOf(' + self + ');';

helper context String def : javaNotContainsCheck(body : String) : String =
	'if (! this.' + self + '.contains(' + self + ')) {\n' +
	body + '\n}';

helper context String def : javaContainsCheck(body : String) : String =
	'if (this.' + self + '.contains(' + self + ')) {\n' +
	body + '\n}';

helper context String def : javaOtherEndSetter(otherEnd : String) : String =
	self + '.set' + otherEnd + '(this);';

helper context String def : adderBody(isUnique : Boolean) : String =
	if isUnique then self->javaNotContainsCheck('    ' + self->javaAdder())
	else self->javaAdder() endif;

helper context String def : javaOtherEndAdder(otherEnd : String) : String =
	self + '.add' + otherEnd + '(this);';

helper context String def : javaOtherEndResetter(otherEnd : String) : String =
	self + '.set' + otherEnd + '(null);';

helper context String def : javaOtherEndRemover(otherEnd : String) : String =
	self + '.remove' + otherEnd + '(this);';

helper context String def : setterAdderBody(otherEnd : String) : String =
	self->javaNotContainsCheck(
	'    ' + self->javaAdder() + '\n' +
	'    ' + self->javaOtherEndSetter(otherEnd));
	
helper context String def : insertBody(isUnique : Boolean) : String =
	if isUnique then self->javaNotContainsCheck('    ' + self->javaInsert())
	else self->javaInsert() endif;

helper context String def : setterInsertBody(otherEnd : String) : String =
	self->javaNotContainsCheck(
	'    ' + self->javaInsert() + '\n' +
	'    ' + self->javaOtherEndSetter(otherEnd));

helper context String def : removerBody() : String =
	self->javaRemover();

helper context String def : setterRemoverBody(otherEnd : String) : String =
	self->javaContainsCheck(
	'    ' + self->javaRemover() + '\n' +
	'    ' + self->javaOtherEndResetter(otherEnd));

helper context String def : dualRemoverBody(otherEnd : String) : String =
	self->javaContainsCheck(
	'    ' + self->javaRemover() + '\n' +
	'    ' + self->javaOtherEndRemover(otherEnd));

------------------------------- DataTypes -----------------------------------

helper context String def : implTypeName() : String =
	if self = 'Integer' then 'java::lang::int' else
	if self = 'UnlimitedNatural' then 'java::lang::int' else
	if self = 'Real' then 'java::lang::double' else
	if self = 'Boolean' then 'java::lang::boolean' else
	if self = 'String' then 'java::lang::String' else
	if self = 'OclAny' then 'java::lang::Object' else
	self->javaImplTypeName()
	endif endif endif endif endif endif;

helper context String def : implCollectionReturnTypeName() : String =
	'java::util::Enumeration';

helper context String def : defaultValueBody() : String =
	if self = 'java::lang::int' then '0' else
	if self = 'java::lang::double' then '0.0' else
	if self = 'java::lang::boolean' then 'false' else
	self->javaDefaultValueBody()
	endif endif endif;

------------------------------- Observer -----------------------------------

helper context String def : javaBoxedType() : String =
	if self = 'OclAny' then
		'Object'
	else if self = 'Real' then
		'Double'
	else 
		self
	endif endif;

helper context String def : javaBoxing(type : String) : String =
	if type = 'Boolean' then
		'new Boolean(' + self + ')'
	else if type = 'Integer' then
		'new Integer(' + self + ')'
	else if type = 'Real' then
		'new Double(' + self + ')'
	else
		self
	endif endif endif;

helper context String def : javaUnboxing(type : String) : String =
	if type = 'Boolean' then
		'(' + self + ').booleanValue()'
	else if type = 'Integer' then
		'(' + self + ').intValue()'
	else if type = 'Real' then
		'(' + self + ').doubleValue()'
	else
		self
	endif endif endif;

helper context String def : javaTypedValue(type : String) : String =
	'(' + type->javaBoxedType() + ') ' + self;

helper context String def : javaUnboxValue(type : String) : String =
	self->javaTypedValue(type)->javaUnboxing(type);

helper context String def : notifyObserversBody() : String =
	'for (java.util.Enumeration os = getObservers(); os.hasMoreElements();) {\n' +
	'    ((' + self + ') os.nextElement()).update(name, value);\n' +
	'}';

helper context String def : updateBody(propertyName : String, parTypeName : String) : String =
	'\nif (name.equals("' + propertyName + '")) {\n' +
	'    ' + self + '(' + 'value'->javaUnboxValue(parTypeName) + ');\n' +
	'}';

helper context String def : setterNotifyBody(type : String, body : String) : String =
	'// Begin Observable stanza\n' +
	'if (this.' + self + ' != ' + self + ') {\n' +
	'    // Begin original body\n' +
	body +
	'\n    // End original body\n' +
	self->notifyStanza(type) +
	'}\n' +
	'// End Observable stanza';
	
helper context String def : adderNotifyBody(type : String, body : String) : String =
	'// Begin Observable stanza\n' +
	'if (! this.' + self + '.contains(' + self + ')) {\n' +
	'    // Begin original body\n' +
	body +
	'\n    // End original body\n' +
	self->notifyStanza(type) +
	'}\n' +
	'// End Observable stanza';
	
helper context String def : removerNotifyBody(type : String, body : String) : String =
	'// Begin Observable stanza\n' +
	'if (this.' + self + '.contains(' + self + ')) {\n' +
	'    // Begin original body\n' +
	body +
	'\n    // End original body\n' +
	self->notifyStanza(type) +
	'}\n' +
	'// End Observable stanza';

helper context String def : notifyStanza(type : String) : String =
	'    notifyObservers("' + self->firstToUpper() + '", ' + self.javaBoxing(type) + ');\n';

helper context String def : setterSubscribeBody(body : String) : String =
	'// Begin subscribe stanza\n' +
    self->unsubscribeStanza() +
	'// Begin original body\n' +
	body +
	'\n// End original body\n' +
    self->subscribeStanza() +
	'// End subscribe stanza';
	
helper context String def : adderSubscribeBody(body : String) : String =
	'// Begin subscribe stanza\n' +
	'// Begin original body\n' +
	body +
	'\n// End original body\n' +
    self->subscribeStanza() +
	'// End subscribe stanza';
	
helper context String def : removerSubscribeBody(body : String) : String =
	'// Begin subscribe stanza\n' +
    self->removeUnsubscribeStanza() +
	'// Begin original body\n' +
	body +
	'\n// End original body\n' +
	'// End subscribe stanza';

helper context String def : subscribeStanza() : String =
    'if (' + self + ' != null) ' + self + '.addObserver(this);\n';

helper context String def : unsubscribeStanza() : String =
    'if (this.' + self + ' != null) this.' + self + '.removeObserver(this);\n';

helper context String def : removeUnsubscribeStanza() : String =
    'if (' + self + ' != null) ' + self + '.removeObserver(this);\n';
